// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JOINStoriesSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import DeveloperToolsSupport
import Foundation
@_exported import JOINStoriesSDK
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct CubeAttributesAnimator : JOINStoriesSDK.LayoutAttributesAnimator {
  public var perspective: CoreFoundation.CGFloat
  public var totalAngle: CoreFoundation.CGFloat
  public init(perspective: CoreFoundation.CGFloat = -1 / 500, totalAngle: CoreFoundation.CGFloat = .pi / 2)
  public func animate(collectionView: UIKit.UICollectionView, attributes: JOINStoriesSDK.AnimatedCollectionViewLayoutAttributes)
}
extension Swift.Encodable {
  public func toJSON() -> Foundation.NSString?
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
public enum HTTPTask {
  case request
  case multipartRequest(data: Foundation.Data, additionHeaders: JOINStoriesSDK.HTTPHeaders?)
  case requestParameters(bodyParameters: JOINStoriesSDK.HTTPParameters?, bodyEncoding: JOINStoriesSDK.ParameterEncoding, urlParameters: JOINStoriesSDK.HTTPParameters?)
  case requestParametersAndHeaders(bodyParameters: JOINStoriesSDK.HTTPParameters?, bodyEncoding: JOINStoriesSDK.ParameterEncoding, urlParameters: JOINStoriesSDK.HTTPParameters?, additionHeaders: JOINStoriesSDK.HTTPHeaders?)
}
public enum AvenirFontTypes : Swift.String {
  case avenirLight
  case avenirLightOblique
  case avenirBook
  case avenirBookOblique
  case avenirRoman
  case avenirOblique
  case avenirMedium
  case avenirMediumOblique
  case avenirHeavy
  case avenirHeavyOblique
  case avenirBlack
  case avenirBlackOblique
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIFont {
  public class func jsAvenir(type: JOINStoriesSDK.AvenirFontTypes, size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public class func setFontFromAPI(name: Swift.String?, size: CoreFoundation.CGFloat?, isItalick: Swift.Bool?) -> UIKit.UIFont
}
public enum PlayerVerticalAnchorType {
  case top
  case bottom
  case center
  public static func == (a: JOINStoriesSDK.PlayerVerticalAnchorType, b: JOINStoriesSDK.PlayerVerticalAnchorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct JoinStoriesPlayerConfigurations {
  public init(playerStandaloneAnimationOrigin: JOINStoriesSDK.PlayerStandaloneAnimationOriginType = .bottom, playerBackgroundColor: UIKit.UIColor = .black, playerVerticalAnchor: JOINStoriesSDK.PlayerVerticalAnchorType = .top, playerShowShareButton: Swift.Bool = false, playerClosingButton: Swift.Bool = true, playerHorizontalMargins: CoreFoundation.CGFloat = 0, playerCornerRadius: CoreFoundation.CGFloat = 0, playerProgressBarDefaultColor: UIKit.UIColor = UIColor.white.withAlphaComponent(0.5), playerProgressBarFillColor: UIKit.UIColor = .white, playerProgressBarThickness: CoreFoundation.CGFloat = 2, playerProgressBarRadius: CoreFoundation.CGFloat = 1)
}
public struct JSONParameterEncoder : JOINStoriesSDK.ParameterEncoder {
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: JOINStoriesSDK.HTTPParameters) throws
}
public enum MaxStoriesInTrigger {
  case all
  case countLimit(limit: Swift.Int)
}
public struct JoinStoriesBubbleConfigurations {
  public let showLabel: Swift.Bool
  public let labelFont: UIKit.UIFont
  public let labelColor: UIKit.UIColor
  public let thumbViewSpacing: CoreFoundation.CGFloat
  public let thumbViewOverlayColor: UIKit.UIColor
  public let loaderColors: [CoreGraphics.CGColor]
  public let loaderWidth: CoreFoundation.CGFloat
  public let storyViewedIndicatorColor: UIKit.UIColor
  public let thumbViewSize: CoreFoundation.CGFloat
  public let showPlayButton: Swift.Bool
  public init(showLabel: Swift.Bool = true, labelFont: UIKit.UIFont = UIFont.jsAvenir(type: .avenirBlack, size: 12), labelColor: UIKit.UIColor = .black, thumbViewSpacing: CoreFoundation.CGFloat = 12, thumbViewOverlayColor: UIKit.UIColor = UIColor.JoinColor.joinTundora, loaderColors: [CoreGraphics.CGColor] = [UIColor.JoinColor.joinAlizarinCrimson.cgColor, UIColor.JoinColor.joinWebOrange.cgColor], loaderWidth: CoreFoundation.CGFloat = 2, storyViewedIndicatorColor: UIKit.UIColor = UIColor.JoinColor.joinGray.withAlphaComponent(0.8), thumbViewSize: CoreFoundation.CGFloat = 74, showPlayButton: Swift.Bool = true, maxStories: Swift.Int = -1)
}
public struct URLParameterEncoder : JOINStoriesSDK.ParameterEncoder {
  public var urlEncodingType: JOINStoriesSDK.UrlEncodingType
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: JOINStoriesSDK.HTTPParameters) throws
}
public struct TextParameterEncoder : JOINStoriesSDK.ParameterEncoder {
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: JOINStoriesSDK.HTTPParameters) throws
}
public enum SizeType {
  case ratio
  case fixed
  public static func == (a: JOINStoriesSDK.SizeType, b: JOINStoriesSDK.SizeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TriggerCardHeightModel {
  public var type: JOINStoriesSDK.SizeType
  public var value: Swift.Double
  public init(type: JOINStoriesSDK.SizeType, value: Swift.Double)
}
public struct TriggerCardConfigurationValues {
  public var showLabel: Swift.Bool
  public var labelFont: UIKit.UIFont
  public var labelColor: UIKit.UIColor
  public var labelSize: CoreFoundation.CGSize?
  public var cardElevation: CoreFoundation.CGFloat
  public var cardRadius: CoreFoundation.CGFloat
  public var showPlayButton: Swift.Bool
  public var showOverlay: Swift.Bool
  public var spacing: CoreFoundation.CGFloat
  public var cardHeight: JOINStoriesSDK.TriggerCardHeightModel
  public var numberOfColumns: Swift.Int
  public init(showLabel: Swift.Bool = true, labelFont: UIKit.UIFont = UIFont.jsAvenir(type: .avenirHeavy, size: 19), labelColor: UIKit.UIColor = UIColor.white, labelSize: CoreFoundation.CGSize? = nil, cardElevation: CoreFoundation.CGFloat = 2, cardRadius: CoreFoundation.CGFloat = 10, showPlayButton: Swift.Bool = true, showOverlay: Swift.Bool = true, spacing: CoreFoundation.CGFloat = 16, cardHeight: JOINStoriesSDK.TriggerCardHeightModel = TriggerCardHeightModel(type: .ratio, value: 9/16), numberOfColumns: Swift.Int = 2, maxStories: Swift.Int = -1)
}
public struct TriggerCardWidthModel {
  public let type: JOINStoriesSDK.SizeType
  public let value: Swift.Double
  public init(type: JOINStoriesSDK.SizeType, value: Swift.Double)
}
public struct TriggerListConfigurationValues {
  public var showLabel: Swift.Bool
  public var labelFont: UIKit.UIFont
  public var labelColor: UIKit.UIColor
  public var labelSize: CoreFoundation.CGSize?
  public var cardElevation: CoreFoundation.CGFloat
  public var cardRadius: CoreFoundation.CGFloat
  public var showPlayButton: Swift.Bool
  public var showOverlay: Swift.Bool
  public var spacing: CoreFoundation.CGFloat
  public var cardWidth: JOINStoriesSDK.TriggerCardWidthModel
  public var numberOfColumns: Swift.Int
  public init(showLabel: Swift.Bool = true, labelFont: UIKit.UIFont = UIFont.jsAvenir(type: .avenirHeavy, size: 12), labelColor: UIKit.UIColor = UIColor.white, labelSize: CoreFoundation.CGSize? = nil, cardElevation: CoreFoundation.CGFloat = 2, cardRadius: CoreFoundation.CGFloat = 8, showPlayButton: Swift.Bool = true, showOverlay: Swift.Bool = true, spacing: CoreFoundation.CGFloat = 6, cardWidth: JOINStoriesSDK.TriggerCardWidthModel = TriggerCardWidthModel(type: .ratio, value: 9/16), numberOfColumns: Swift.Int = 2, maxStories: Swift.Int = -1)
}
extension Foundation.Date {
  public static func getCurrentUnixTimestampInMilliseconds() -> Swift.Int64
}
extension Foundation.NSMutableData {
  public func appendString(_ string: Swift.String)
}
public struct JOINStoriesConfiguration {
  public static func setValues(teamId: Swift.String)
}
public enum CachingPlayerItemConfiguration {
  public static var downloadBufferLimit: Swift.Int
  public static var readDataLimit: Swift.Int
  public static var shouldVerifyDownloadedFileSize: Swift.Bool
  public static var minimumExpectedFileSize: Swift.Int
}
public enum PlayerDismissedType {
  case auto
  case manual
  public static func == (a: JOINStoriesSDK.PlayerDismissedType, b: JOINStoriesSDK.PlayerDismissedType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol JOINStoriesListenerDelegate : AnyObject {
  func onTriggerFetchError(message: Swift.String)
  func onTriggerFetchEmpty(message: Swift.String)
  func onTriggerFetchSuccess()
  func onPlayerFetchSuccess()
  func onPlayerLoaded()
  func onPlayerFetchError(message: Swift.String)
  func onPlayerDismissed(type: JOINStoriesSDK.PlayerDismissedType)
  func onContentLinkClick(url: Swift.String) -> Swift.Bool
  func onTriggerAnalyticsCallback(model: JOINStoriesSDK.TriggerAnalyticsModel)
  func onPlayerAnalyticsCallback(model: JOINStoriesSDK.PlayerAnalyticsModel)
}
extension JOINStoriesSDK.JOINStoriesListenerDelegate {
  public func onTriggerFetchError(message: Swift.String)
  public func onTriggerFetchEmpty(message: Swift.String)
  public func onTriggerFetchSuccess()
  public func onPlayerFetchSuccess()
  public func onPlayerLoaded()
  public func onPlayerFetchError(message: Swift.String)
  public func onPlayerDismissed(type: JOINStoriesSDK.PlayerDismissedType)
  public func onContentLinkClick(url: Swift.String) -> Swift.Bool
  public func onTriggerAnalyticsCallback(model: JOINStoriesSDK.TriggerAnalyticsModel)
  public func onPlayerAnalyticsCallback(model: JOINStoriesSDK.PlayerAnalyticsModel)
}
public struct ResponseInfo {
  public var httpResponse: Foundation.HTTPURLResponse?
  public var data: Foundation.Data?
  public var error: (any Swift.Error)?
  public var elapsedTime: Foundation.TimeInterval
}
extension UIKit.UIColor {
  public struct JoinColor {
    public static let joinLightRed: UIKit.UIColor
    public static let joinLightYellow: UIKit.UIColor
    public static let joinLightPink: UIKit.UIColor
    public static let joinTundora: UIKit.UIColor
    public static let joinAlizarinCrimson: UIKit.UIColor
    public static let joinWebOrange: UIKit.UIColor
    public static let joinGray: UIKit.UIColor
    public static let joinLigthCTA: UIKit.UIColor
    public static let joinDarkCTA: UIKit.UIColor
  }
  convenience public init?(hex: Swift.String?)
  convenience public init?(rgba: [Swift.Double]?)
}
public enum TriggerAnalyticsEventType {
  case storiesFetched
  case widgetMounted
  case componentVisible50
  case componentVisible75
  case firstClickOnWidget(cpGoToUrl: Swift.String)
  case additionalClickOnWidget(cpGoToUrl: Swift.String)
  case storyError(cpErrorMessage: Swift.String?)
}
public struct TriggerAnalyticsModel {
  public var payload: JOINStoriesSDK.TriggerAnalyticsPayloadModel
}
public struct TriggerAnalyticsPayloadModel {
  public var eventOwner: Swift.String?
  public var cpWidgetAlias: Swift.String
  public var cpWidgetVersion: Swift.String
  public var date: Swift.Int64
  public var eventCategory: Swift.String
  public var eventType: Swift.String
  public init(cpWidgetAlias: Swift.String, cpWidgetVersion: Swift.String = "", date: Swift.Int64 = Date.getCurrentUnixTimestampInMilliseconds(), eventCategory: Swift.String = "widget", eventType: JOINStoriesSDK.TriggerAnalyticsEventType)
}
public enum TriggerCardOrientationType {
  case grid
  case list
  public static func == (a: JOINStoriesSDK.TriggerCardOrientationType, b: JOINStoriesSDK.TriggerCardOrientationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0.0, *)
public struct TriggerList : SwiftUI.View {
  public init(_ configurationModel: JOINStoriesSDK.TriggerListConfigurationValues = TriggerListConfigurationValues(), _ configurationPlayerModel: JOINStoriesSDK.JoinStoriesPlayerConfigurations = JoinStoriesPlayerConfigurations(), alias: Swift.String, _ customParameters: [Swift.String : Any] = [:])
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14JOINStoriesSDK11TriggerListV4bodyQrvp", 0) __
}
public struct ErrorMessages {
  public static let sorryTryAgainLater: Swift.String
}
public enum NetworkResponseError : Swift.Equatable {
  case authenticationError
  case accessForbidden
  case alert(message: Swift.String)
  case noInternetConnection(message: Swift.String)
  case timeOut(message: Swift.String)
  case unKnownError
  case cantFindHost
  public static func == (a: JOINStoriesSDK.NetworkResponseError, b: JOINStoriesSDK.NetworkResponseError) -> Swift.Bool
}
public protocol LayoutAttributesAnimator {
  func animate(collectionView: UIKit.UICollectionView, attributes: JOINStoriesSDK.AnimatedCollectionViewLayoutAttributes)
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  case patch
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TriggerCardView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(_ configurationTriggerModel: JOINStoriesSDK.TriggerCardConfigurationValues = TriggerCardConfigurationValues(), _ configurationPlayerModel: JOINStoriesSDK.JoinStoriesPlayerConfigurations = JoinStoriesPlayerConfigurations(), alias: Swift.String, _ customParameters: [Swift.String : Any] = [:])
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func dismissPlayer()
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class TriggerListView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(_ configurationModel: JOINStoriesSDK.TriggerListConfigurationValues = TriggerListConfigurationValues(), _ configurationPlayerModel: JOINStoriesSDK.JoinStoriesPlayerConfigurations = JoinStoriesPlayerConfigurations(), alias: Swift.String, _ customParameters: [Swift.String : Any] = [:])
  @objc deinit
  @_Concurrency.MainActor(unsafe) final public func dismissPlayer()
}
@available(iOS 13.0.0, *)
public struct BubbleTrigger : SwiftUI.View {
  public init(_ bubbleConfiguration: JOINStoriesSDK.JoinStoriesBubbleConfigurations = JoinStoriesBubbleConfigurations(), _ playerConfiguration: JOINStoriesSDK.JoinStoriesPlayerConfigurations = JoinStoriesPlayerConfigurations(), alias: Swift.String, _ customParameters: [Swift.String : Any] = [:])
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14JOINStoriesSDK13BubbleTriggerV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers final public class JOINStoriesListener {
  public static func setDelegate(delegate: any JOINStoriesSDK.JOINStoriesListenerDelegate)
  @objc deinit
}
public typealias HTTPParameters = [Swift.String : Any]
public protocol ParameterEncoder {
  func encode(urlRequest: inout Foundation.URLRequest, with parameters: JOINStoriesSDK.HTTPParameters) throws
}
public enum UrlEncodingType {
  case urlEncodingWithPercentEncoding
  case none
  public static func == (a: JOINStoriesSDK.UrlEncodingType, b: JOINStoriesSDK.UrlEncodingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ParameterEncoding {
  case urlEncoding(urlEncodingType: JOINStoriesSDK.UrlEncodingType)
  case urlBodyEncoded(urlEncodingType: JOINStoriesSDK.UrlEncodingType)
  case jsonEncoding
  case urlAndJsonEncoding(urlEncodingType: JOINStoriesSDK.UrlEncodingType)
  case textEncoding
  public func encode(urlRequest: inout Foundation.URLRequest, bodyParameters: JOINStoriesSDK.HTTPParameters?, urlParameters: JOINStoriesSDK.HTTPParameters?) throws
}
public enum NetworkError : Swift.String, Swift.Error {
  case parametersNil
  case encodingFailed
  case missingURL
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AnimatedCollectionViewLayout : UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) open var animator: (any JOINStoriesSDK.LayoutAttributesAnimator)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layoutAttributesClass: Swift.AnyClass {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForElements(in rect: CoreFoundation.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func shouldInvalidateLayout(forBoundsChange newBounds: CoreFoundation.CGRect) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AnimatedCollectionViewLayoutAttributes : UIKit.UICollectionViewLayoutAttributes {
  @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) public var scrollDirection: UIKit.UICollectionView.ScrollDirection
  @_Concurrency.MainActor(unsafe) public var startOffset: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var middleOffset: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var endOffset: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public enum PlayerStandaloneAnimationOriginType {
  case top
  case topLeft
  case topRight
  case bottom
  case bottomLeft
  case bottomRight
  public static func == (a: JOINStoriesSDK.PlayerStandaloneAnimationOriginType, b: JOINStoriesSDK.PlayerStandaloneAnimationOriginType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class JoinStoriesPlayer {
  public init(_ playerConfigurationModel: JOINStoriesSDK.JoinStoriesPlayerConfigurations = JoinStoriesPlayerConfigurations(), alias: Swift.String, _ customParameters: [Swift.String : Any] = [:])
  public func show()
  public func dismissPlayer()
  @objc deinit
}
public enum LogOption {
  case onlyDebug
  case jsonPrettyPrint
  case includeSeparator
  public static var defaultOptions: [JOINStoriesSDK.LogOption] {
    get
  }
  public static func == (a: JOINStoriesSDK.LogOption, b: JOINStoriesSDK.LogOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Phase {
  case request
  case response(success: Swift.Bool)
  public var isError: Swift.Bool {
    get
  }
}
public protocol Printer {
  func print(_ string: Swift.String, phase: JOINStoriesSDK.Phase)
}
public struct NativePrinter : JOINStoriesSDK.Printer {
  public init()
  public func print(_ string: Swift.String, phase: JOINStoriesSDK.Phase)
}
public struct URLAndBodyParameterEncoder : JOINStoriesSDK.ParameterEncoder {
  public var urlEncodingType: JOINStoriesSDK.UrlEncodingType
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: JOINStoriesSDK.HTTPParameters) throws
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class BubbleTriggerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(_ bubbleConfiguration: JOINStoriesSDK.JoinStoriesBubbleConfigurations = JoinStoriesBubbleConfigurations(), _ playerConfiguration: JOINStoriesSDK.JoinStoriesPlayerConfigurations = JoinStoriesPlayerConfigurations(), alias: Swift.String, _ customParameters: [Swift.String : Any] = [:])
  @objc deinit
  @_Concurrency.MainActor(unsafe) final public func dismissPlayer()
}
@available(iOS 13.0.0, *)
public struct TriggerCard : SwiftUI.View {
  public init(_ configurationTriggerModel: JOINStoriesSDK.TriggerCardConfigurationValues = TriggerCardConfigurationValues(), _ configurationPlayerModel: JOINStoriesSDK.JoinStoriesPlayerConfigurations = JoinStoriesPlayerConfigurations(), alias: Swift.String, _ customParameters: [Swift.String : Any] = [:])
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14JOINStoriesSDK11TriggerCardV4bodyQrvp", 0) __
}
public typealias NetworkRouterCompletion = (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void
@objc public protocol CachingPlayerItemDelegate {
  @objc optional func playerItem(_ playerItem: JOINStoriesSDK.CachingPlayerItem, didFinishDownloadingFileAt filePath: Swift.String)
  @objc optional func playerItem(_ playerItem: JOINStoriesSDK.CachingPlayerItem, didDownloadBytesSoFar bytesDownloaded: Swift.Int, outOf bytesExpected: Swift.Int)
  @objc optional func playerItem(_ playerItem: JOINStoriesSDK.CachingPlayerItem, downloadingFailedWith error: any Swift.Error)
  @objc optional func playerItemReadyToPlay(_ playerItem: JOINStoriesSDK.CachingPlayerItem)
  @objc optional func playerItemDidFailToPlay(_ playerItem: JOINStoriesSDK.CachingPlayerItem, withError error: (any Swift.Error)?)
  @objc optional func playerItemPlaybackStalled(_ playerItem: JOINStoriesSDK.CachingPlayerItem)
}
@objc @_inheritsConvenienceInitializers final public class CachingPlayerItem : AVFoundation.AVPlayerItem {
  final public var passOnObject: Any?
  weak final public var delegate: (any JOINStoriesSDK.CachingPlayerItemDelegate)?
  @objc convenience dynamic public init(url: Foundation.URL)
  convenience public init(url: Foundation.URL, avUrlAssetOptions: [Swift.String : Any]? = nil)
  convenience public init(url: Foundation.URL, customFileExtension: Swift.String, avUrlAssetOptions: [Swift.String : Any]? = nil)
  public init(url: Foundation.URL, saveFilePath: Swift.String, customFileExtension: Swift.String?, avUrlAssetOptions: [Swift.String : Any]? = nil)
  public init(nonCachingURL url: Foundation.URL, avUrlAssetOptions: [Swift.String : Any]? = nil)
  convenience public init(data: Foundation.Data, customFileExtension: Swift.String) throws
  public init(filePathURL: Foundation.URL, fileExtension: Swift.String? = nil)
  @objc override dynamic public init(asset: AVFoundation.AVAsset, automaticallyLoadedAssetKeys: [Swift.String]?)
  @objc deinit
  final public func download()
  @objc override final public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
public enum PlayerAnalyticsEventType {
  case storyPageVisible
  case storyLastPageVisible
  case storyAudioMuted
  case storyAudioUnMuted
  case storyClickOnCallToAction(ctaType: Swift.String)
  case storyError(cpErrorMessage: Swift.String)
}
public struct PlayerAnalyticsModel {
  public var payload: JOINStoriesSDK.PlayerAnalyticsPayloadModel
}
public struct PlayerAnalyticsPayloadModel {
  public var storyPageCount: Swift.Int
  public var eventOwner: Swift.String?
  public var storyId: Swift.String?
  public var date: Swift.Int64
  public var eventCategory: Swift.String
  public var cpIndex: Swift.Int?
  public var cpTitle: Swift.String?
  public var eventType: Swift.String
  public init(storyPageCount: Swift.Int, eventOwner: Swift.String?, storyId: Swift.String?, date: Swift.Int64 = Date.getCurrentUnixTimestampInMilliseconds(), eventCategory: Swift.String = "story", cpIndex: Swift.Int?, cpTitle: Swift.String = "app-story-title", eventType: JOINStoriesSDK.PlayerAnalyticsEventType)
}
extension JOINStoriesSDK.AvenirFontTypes : Swift.Equatable {}
extension JOINStoriesSDK.AvenirFontTypes : Swift.Hashable {}
extension JOINStoriesSDK.AvenirFontTypes : Swift.RawRepresentable {}
extension JOINStoriesSDK.PlayerVerticalAnchorType : Swift.Equatable {}
extension JOINStoriesSDK.PlayerVerticalAnchorType : Swift.Hashable {}
extension JOINStoriesSDK.SizeType : Swift.Equatable {}
extension JOINStoriesSDK.SizeType : Swift.Hashable {}
extension JOINStoriesSDK.PlayerDismissedType : Swift.Equatable {}
extension JOINStoriesSDK.PlayerDismissedType : Swift.Hashable {}
extension JOINStoriesSDK.TriggerCardOrientationType : Swift.Equatable {}
extension JOINStoriesSDK.TriggerCardOrientationType : Swift.Hashable {}
extension JOINStoriesSDK.HTTPMethod : Swift.Equatable {}
extension JOINStoriesSDK.HTTPMethod : Swift.Hashable {}
extension JOINStoriesSDK.HTTPMethod : Swift.RawRepresentable {}
extension JOINStoriesSDK.UrlEncodingType : Swift.Equatable {}
extension JOINStoriesSDK.UrlEncodingType : Swift.Hashable {}
extension JOINStoriesSDK.NetworkError : Swift.Equatable {}
extension JOINStoriesSDK.NetworkError : Swift.Hashable {}
extension JOINStoriesSDK.NetworkError : Swift.RawRepresentable {}
extension JOINStoriesSDK.PlayerStandaloneAnimationOriginType : Swift.Equatable {}
extension JOINStoriesSDK.PlayerStandaloneAnimationOriginType : Swift.Hashable {}
extension JOINStoriesSDK.LogOption : Swift.Equatable {}
extension JOINStoriesSDK.LogOption : Swift.Hashable {}
